{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/linkedin/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2Db,4BAAiB;;;;IAE7C;;;;;OAKG;;;;;;;IAEH,wBAAK;;;;;;cAAC,MAA6B,EAAE,eAAwB,IAAkB,MAAM,CAAC,EAAE;IAExF;;OAEG;;;;IAEH,yBAAM;;;mBAAY;IAElB;;;;OAIG;;;;;;IAEH,6BAAU;;;;;cAAC,IAAY,IAAkB,MAAM,CAAC,EAAE;IAElD;;;;;OAKG;;;;;;;IAEH,8BAAW;;;;;;cAAC,IAAY,EAAE,IAAS,IAAkB,MAAM,CAAC,EAAE;IAE9D;;;;OAIG;;;;;;IAEH,8BAAW;;;;;cAAC,QAAgB,IAAkB,MAAM,CAAC,EAAE;IAEvD;;;OAGG;;;;;IAEH,mCAAgB;;;;kBAAuB,MAAM,CAAC,EAAE;IAEhD;;;OAGG;;;;;IAEH,mCAAgB;;;;kBAAmB,MAAM,CAAC,EAAE;;gBAvD7C,UAAU;;;QASR,OAAO,EAAE;;;;yCAC8E;;QAKvF,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;0CACN;;QAOjB,OAAO,EAAE;;;;8CACwC;;QAQjD,OAAO,EAAE;;;;+CACoD;;QAO7D,OAAO,EAAE;;;;+CAC6C;;QAMtD,OAAO,EAAE;;;;oDACsC;;QAM/C,OAAO,EAAE;;;;oDACkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAtDjC,QAAQ;QAVpB,MAAM,CAAC;YACN,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,yBAAyB;YACjC,SAAS,EAAE,0BAA0B;YACrC,IAAI,EAAE,iDAAiD;YACvD,OAAO,EAAE,gFAAgF;YACzF,gBAAgB,EAAE,CAAC,QAAQ,CAAC;YAC5B,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,QAAQ,EAwDpB;mBApHD;EA4D8B,iBAAiB;SAAlC,QAAQ","sourcesContent":["import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\n\nexport type LinkedInLoginScopes = 'r_basicprofile' | 'r_emailaddress' | 'rw_company_admin' | 'w_share';\n\n/**\n * @name LinkedIn\n * @description\n * A Cordova plugin that lets you use LinkedIn Native SDKs for Android and iOS.\n *\n * Please see the [plugin's repo](https://github.com/zyramedia/cordova-plugin-linkedin#installation) for detailed installation steps.\n *\n * @usage\n * ```typescript\n * import { LinkedIn } from '@ionic-native/linkedin';\n *\n * constructor(private linkedin: LinkedIn) { }\n *\n * ...\n *\n * // check if there is an active session\n * this.linkedin.hasActiveSession().then((active) => console.log('has active session?', active));\n *\n * // login\n * const scopes = ['r_basicprofile', 'r_emailaddress', 'rw_company_admin', 'w_share'];\n * this.linkedin.login(scopes, true)\n *   .then(() => console.log('Logged in!'))\n *   .catch(e => console.log('Error logging in', e));\n *\n *\n * // get connections\n * this.linkedin.getRequest('people/~')\n *   .then(res => console.log(res))\n *   .catch(e => console.log(e));\n *\n * // share something on profile\n * const body = {\n *   comment: 'Hello world!',\n *   visibility: {\n *     code: 'anyone'\n *   }\n * };\n *\n * this.linkedin.postRequest('~/shares', body)\n *   .then(res => console.log(res))\n *   .catch(e => console.log(e));\n *\n *\n * ```\n */\n@Plugin({\n  pluginName: 'LinkedIn',\n  plugin: 'cordova-plugin-linkedin',\n  pluginRef: 'cordova.plugins.LinkedIn',\n  repo: 'https://github.com/zyra/cordova-plugin-linkedin',\n  install: 'ionic cordova plugin add cordova-plugin-linkedin --variable APP_ID=YOUR_APP_ID',\n  installVariables: ['APP_ID'],\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class LinkedIn extends IonicNativePlugin {\n\n  /**\n   * Login with the LinkedIn App\n   * @param scopes {string[]} Scopes to authorize\n   * @param promptToInstall {boolean} set to true to prompt the user to download the LinkedIn app if it's not installed\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  login(scopes: LinkedInLoginScopes[], promptToInstall: boolean): Promise<any> { return; }\n\n  /**\n   * Clears the current session\n   */\n  @Cordova({ sync: true })\n  logout(): void { }\n\n  /**\n   * Make a get request\n   * @param path {string} request path\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getRequest(path: string): Promise<any> { return; }\n\n  /**\n   * Make a post request\n   * @param path {string} request path\n   * @param body {Object} request body\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  postRequest(path: string, body: any): Promise<any> { return; }\n\n  /**\n   * Opens a member's profile\n   * @param memberId {string} Member id\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  openProfile(memberId: string): Promise<any> { return; }\n\n  /**\n   * Checks if there is already an existing active session. This should be used to avoid unnecessary login.\n   * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates whether there is an active session\n   */\n  @Cordova()\n  hasActiveSession(): Promise<boolean> { return; }\n\n  /**\n   * Checks if there is an active session and returns the access token if it exists.\n   * @return {Promise<any>} returns a promise that resolves with an object that contains an access token if there is an active session\n   */\n  @Cordova()\n  getActiveSession(): Promise<any> { return; }\n\n}\n"]}